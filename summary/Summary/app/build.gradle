/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'java'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
// 미디어 파일에서 메타 정보(위도/경도, 해상도 등) 추출
    // implementation 'com.drewnoakes:metadata-extractor:2.18.0'

    // Spring IoC 컨테이너
    //implementation 'org.springframework:spring-context:6.0.11'

    // @Resource 애노테이션이 들어 있는 API
    //implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Spring JDBC 보조 라이브러리
    // - DataSource 구현체가 들어 있다.
    // implementation 'org.springframework:spring-jdbc:5.3.13'

    // Apache commons-dbcp 라이브러리
    // - DataSource 구현체가 들어 있다.
    // implementation 'commons-dbcp:commons-dbcp:1.4'

    // Reflection API를 좀 더 쉽게 사용하게 도와주는 유틸리티
    //implementation 'org.reflections:reflections:0.9.12'

    // Mybatis 퍼시스턴스 프레임워크
    // implementation 'org.mybatis:mybatis:3.5.7'

    // Mybastis를 Spring과 연동할 때 사용할 라이브러리
    // implementation 'org.mybatis:mybatis-spring:2.0.6'

    // 임베디드 Tomcat 서버
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.79'

    // MariaDB JDBC 드라이버
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.2'

    // Oracle JDBC Driver
    implementation 'com.oracle.database.jdbc:ojdbc11:21.11.0.0'

    // MSSQL JDBC Driver
    implementation 'com.microsoft.sqlserver:mssql-jdbc:11.2.2.jre17'


    // MySQL JDBC Driver
    implementation 'mysql:mysql-connector-java:8.0.33'

    // Google JSON 라이브러리
    implementation 'com.google.code.gson:gson:2.10.1'

    // jackson-databind JSON 라이브러리
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

    // Apache HTTP 통신 라이브러리
    //implementation 'org.apache.httpcomponents.client5:httpclient5:5.0'
    //implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.0'

    // AOP 라이브러리
    // implementation 'org.aspectj:aspectjweaver:1.9.9.1'

    // log4j 2.x 라이브러리
    // implementation 'org.apache.logging.log4j:log4j-core:2.14.1'

    // Netty 라이브러리
    // implementation 'io.netty:netty-all:4.1.96.Final'

    // Reactor Netty 라이브러리
    //implementation platform('io.projectreactor:reactor-bom:2022.0.9')
    //implementation 'io.projectreactor.netty:reactor-netty-core'
    //implementation 'io.projectreactor.netty:reactor-netty-http'

    // 단위 테스트 할 때 사용할 라이브러리
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    // 단위 테스트와 관련된 라이브러리
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 일반적으로 애플리케이션을 개발할 때 많이 사용하는 라이브러리
    // 구글 개발자들이 만든 라이브러리이다.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// 소스 파일이 어떤 자바 버전으로 되어 있는지 Gradle 에게 알려준다.


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'summary.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
